cycle: 1
@ override public long ( time zone tz long time ) { return new date time ( time get date time zone ( tz ) ) . get millis of day ( ) ; } _eos_
get milli seconds in day _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
public static string ( string class name ) { if ( " com . microsoft . jdbc . sqlserver . sql server driver " . equals ( class name ) ) return " mssql data base " ; return class name ; } _eos_
get label for driver class _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
public static string ( char sequence cs int radix ) { return long . to string ( create 6 4 bit hash ( cs ) radix ) ; } _eos_
create bit hash as string _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
public ( string str string charset name ) throws io exception { this ( str charset util . to charset ( charset name ) ) ; } _eos_
byte array input stream reader _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
string ( ) throws s 3 exception { if ( string util . is empty ( access key id ) ) throw new s 3 exception ( " access key id is not defined define in " + constants . app cfc + " ( this . s 3 . access key id ) or as part of the path . " ) ; return access key id ; } _eos_
get access key id validate _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
public resource class loader ( resource[] resources ) throws io exception { if ( array util . is empty ( resources ) ) return this ; string key = hash ( resources ) ; resource class loader rcl = customc ls = = null ? null : customc ls . get ( key ) ; if ( rcl ! = null ) return rcl ; resources = resource util . merge ( this . get resources ( ) resources ) ; rcl = new resource class loader ( resources get parent ( ) ) ; if ( customc ls = = null ) customc ls = new reference map ( ) ; customc ls . put ( key rcl ) ; return rcl ; } _eos_
get custom resource class loader _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
private static short[] ( string attributes ) throws io exception { string[] arr ; try { arr = list util . to string array ( list util . list to array remove empty ( attributes . to lower case ( ) ' ' ) ) ; } catch ( page exception e ) { arr = new string[0] ; } boolean has normal = false ; boolean has read only = false ; boolean has hidden = false ; boolean has archive = false ; boolean has system = false ; for ( int i = 0 ; i < arr . length ; i + + ) { string str = arr[i] . trim ( ) . to lower case ( ) ; if ( str . equals ( " readonly " ) || str . equals ( " read only " ) || str . equals ( " + r " ) ) has read only = true ; else if ( str . equals ( " normal " ) || str . equals ( " temporary " ) ) has normal = true ; else if ( str . equals ( " hidden " ) || str . equals ( " + h " ) ) has hidden = true ; else if ( str . equals ( " system " ) || str . equals ( " + s " ) ) has system = true ; else if ( str . equals ( " archive " ) || str . equals ( " + a " ) ) has archive = true ; else throw new io exception ( " invalid attribute definition [ " + str + " ] " ) ; } short[] flags = new short[ 4 ] ; if ( has read only ) flags[read only] = yes ; else if ( has normal ) flags[read only] = no ; if ( has hidden ) flags[hidden] = yes ; else if ( has normal ) flags[hidden] = no ; if ( has system ) flags[system] = yes ; else if ( has normal ) flags[system] = no ; if ( has archive ) flags[archive] = yes ; else if ( has normal ) flags[archive] = no
str attr to boolean flags _eos_
get _eos_ _eos_ _eos_ _eos_ _eos_
public static long ( ) { memory usage mu = get perm gen space size ( null ) ; if ( mu = = null ) return 1 ; long max = mu . get max ( ) ; long used = mu . get used ( ) ; if ( max < 0 || used < 0 ) return 1 ; return max used ; } _eos_
get free perm gen space size
user _eos_ _eos_ _eos_ _eos_ _eos_
private static memory usage ( memory usage default value ) { if ( perm gen space bean ! = null ) return perm gen space bean . get usage ( ) ; memory poolmx bean tmp = get perm gen space bean ( ) ; if ( tmp ! = null ) return tmp . get usage ( ) ; return default value ; } _eos_
get perm gen space size _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
private static void ( url class loader ucl map pathes ) { get class pathes from loader ( ucl . get parent ( ) pathes ) ; url[] urls = ucl . getur ls ( ) ; for ( int i = 0 ; i < urls . length ; i + + ) { file file = file util . to file ( urls[i] . get path ( ) ) ; if ( file . exists ( ) ) try { pathes . put ( file . get canonical path ( ) " " ) ; } catch ( io exception e ) { } } } _eos_
get class pathes from loader _eos_
user _eos_ _eos_ _eos_ _eos_ _eos_
